@page "/users"
@using UserManagement.Shared.Models
@using UserManagement.Web.Client.Services.Interfaces
@inject IUserApiService UserApiService

<PageTitle>Users</PageTitle>

<div class="table-responsive">
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Id</th>
				<th>Forename</th>
				<th>Surname</th>
				<th>Email</th>
				<th>Account Active</th>
				<th style="width: 1px;"></th>
			</tr>
		</thead>
		<tbody>
			@if (userList == null)
			{
				<tr>
					<td colspan="6"><em>Loading...</em></td>
				</tr>
			}
			else
			{
				@foreach (var item in userList.Items)
				{
					<tr>
						<td>@item.Id</td>
						<td>@item.Forename</td>
						<td>@item.Surname</td>
						<td>@item.Email</td>
						<td>@(item.IsActive ? "Yes" : "No")</td>
						<td>
							<div class="dropdown">
								<button type="button" class="btn btn-default dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" id="btnToggleActions">
									Actions
								</button>
								<ul class="dropdown-menu" aria-labelledby="btnToggleActions">
									<li><a class="dropdown-item" href="#">View</a></li>
									<li><a class="dropdown-item" href="#">Edit</a></li>
									<li><a class="dropdown-item" href="#">Delete</a></li>
								</ul>
							</div>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
</div>


<div>
	<div class="btn-group" role="group">
		<button class="btn @(currentFilter == "all" ? "btn-success" : "btn-outline-success")" @onclick="ShowAllUsers">Show All</button>
		<button class="btn @(currentFilter == "active" ? "btn-primary" : "btn-outline-primary")" @onclick="ShowActiveUsers">Active Only</button>
		<button class="btn @(currentFilter == "inactive" ? "btn-danger" : "btn-outline-danger")" @onclick="ShowNonActiveUsers">Non Active</button>
	</div>
	<button class="btn btn-primary float-end">
		Add User
	</button>
</div>


@code {
	private UserListDto? userList;
	private string currentFilter = "all";

	protected override async Task OnInitializedAsync()
	{
		await LoadUsers();
	}

	private async Task LoadUsers(bool? isActive = null)
	{
		currentFilter = isActive switch
		{
			null => "all",
			true => "active",
			false => "inactive"
		};

		userList = await UserApiService.GetUsersAsync(isActive);
	}

	private async Task ShowAllUsers() => await LoadUsers();
	private async Task ShowActiveUsers() => await LoadUsers(true);
	private async Task ShowNonActiveUsers() => await LoadUsers(false);
}
